---
description: 
globs: 
alwaysApply: true
---
Always verify contract methods exist before implementing them
Use existing utility functions in the codebase rather than reimplementing them
Check the actual contract ABIs to understand available methods
When in doubt, ask for clarification rather than making assumptions
Follow established patterns in the codebase
Do not use mock contracts for testing.  create real instances of each contract.

For Vyper Code:
We are using at least vyper version 0.4.1
External method signatures should be camelCase
Instance Variables should also be camelCase
Method Inputs should _be_underscore_delimited


ArtCommissionHubOwners:
- Source of truth for all Art Commission Hub Owners
- Updates owner based on L2OwnershipRelay: via registerNFTOwnerFromParentChain
- Updates owner of non-nft collections via via _createOrUpdateCommissionHubAndOwner
- Allows access to CommissionHubs for dynamic content on UIs



Profile Creation & Ownership
Single Profile via Factory: Profiles must be created exclusively through the ProfileFactoryAndRegistry contract. Each user address can have at most one Profile (enforced by the factory). Direct deployment of Profile contracts is disallowed.

Immutable Profile Owner: A Profile’s owner is set once at initialization and never changed. The initialize function of Profile should assert that no owner is set and then fix the owner to the provided address. There is no mechanism to transfer a Profile to a new owner.
Auto-Link Commission Hubs: Upon profile creation, automatically link any existing ArtCommissionHub contracts owned by that user to the new Profile. The factory should query the ArtCommissionHubOwners for commission hubs belonging to the user and call Profile.addCommissionHub for each. This ensures the Profile is aware of all the user’s commission hubs from the start.

**
** // TODO - What happens if we need to register a commissioned piece and we don't have the ArtCommissionHub yet?  Shouldnt the ArtCommissionHub be the source of truth?
**
** 
ArtPiece Creation & Commission Attachment
Controlled ArtPiece Minting: All new art pieces (NFTs) are created through a user’s Profile contract using Profile.createArtPiece. This centralizes minting logic and ensures the platform can track and initialize art pieces correctly. Do not allow deploying or initializing ArtPiece contracts outside of the Profile context.
Commission vs. Standard Pieces: Distinguish standard art pieces from commission-based pieces at creation. If a commission hub address is provided to createArtPiece (i.e., the art is a commissioned piece), the Profile contract must set the NFT’s initial owner and artist appropriately. In a commission scenario, the _owner_input should be the commission recipient (commissioner) and _artist_input the creator’s address, so the NFT is minted directly to the commissioner. For a regular art piece, the profile owner is typically the artist and owner by default.

Hub-Attached Ownership: When an ArtPiece is attached to an ArtCommissionHub, treat the hub’s owner as the effective owner of the piece. The ArtPiece’s internal owner field is not authoritative in this case – once attached, the piece is essentially “locked” to the hub. The ArtPiece contract should prevent direct ownership transfers if attachedToArtCommissionHub is true. Never attempt to override an ArtPiece’s owner manually for hub-linked pieces; instead, rely on the hub (and cross-chain owner updates) to reflect the current owner.

Commission Workflow (Unverified & Verified)
Submission via Hub: Always use the ArtCommissionHub to handle commission piece submissions. When an artist verifies a commissioned piece, they must call ArtCommissionHub.submitCommission(artPiece) rather than adding it directly to any profile list. The hub will verify the ArtPiece contract type and emit a CommissionSubmitted event, adding the piece to the hub’s tracking list (verified or unverified) accordingly.

Unverified vs Verified State: New commissions start as unverified unless the contributor is pre-approved. On the hub side, if the submitting artist (or their ArtPiece code) is whitelisted, the piece goes directly into the verified list; otherwise it goes to unverifiedArt. Similarly, Profiles maintain parallel lists: commissions (verified) and unverifiedCommissions. When a commission art piece is associated with a profile (e.g., the commissioner’s profile), if someone other than the profile owner adds it, it should appear as unverified by default. Profile owners can always choose to add commissions to their own profile, which places them in the verified list.

Verification Process: Moving a commission from unverified to verified must be done through explicit action by an authorized party. On hubs, only the hub’s owner (the NFT owner/commissioner) or an equivalent authority can call verifyCommission to approve an art piece. Verification on the hub should remove or mark the item as verified (decrement the submitter’s unverified count, etc.) and emit a CommissionVerified event. Ensure that once verified, the piece is recorded in the hub’s verifiedArt list and no longer counted in unverified. Correspondingly, any unverified entry in a Profile can be treated as verified (or moved to the verified list) only after the hub verification occurs or the profile owner manually re-adds it as verified.

Proper Event Logging: Every state transition in the commission lifecycle should be logged. Use CommissionSubmitted (with verified=false/true) when a piece is added, and CommissionVerified when it is approved. This provides an immutable record for front-ends and off-chain tools. Avoid using incorrect events or omitting events for these transitions – the logs are crucial for tracking commission status.

Permission Controls: Enforce strict permissions on who can add or remove commissions in both Profile and Hub contracts. A Profile’s addCommission should accept additions only from either the profile owner, the ProfileFactory (acting as hub proxy), or the artist/owner of the commission piece. Its removeCommission should similarly be restricted to the profile owner, the ProfileFactory, the commission’s artist, or the commission hub’s owner. This prevents unauthorized users from inserting or deleting commission references. Always validate that the caller is allowed and (if relevant) not blacklisted before mutating commission state.
Commission Bidding & Escrow

Escrow on Bid: All commission bid offers must lock funds in escrow. When a client (commissioner) places a bid for a commission, the bid amount (ETH) should be held by a contract and not transferred to the artist immediately. Do not allow direct payment to the artist upon bid; instead, escrow the ETH under contract control until the proper acceptance flow is completed.

Accept → Fulfill → Confirm Sequence: Implement the commission workflow in three mandatory stages – acceptance, fulfillment, and confirmation – with no shortcuts. An artist must explicitly accept a bid offer before proceeding (e.g., by calling an acceptBid function); only after acceptance does the commission move forward. The artist then fulfills the commission by creating the ArtPiece and submitting it to the hub (delivery of the work). Finally, the commissioner confirms they are satisfied (e.g., via a confirmDelivery call). Only upon this final confirmation are the escrowed funds released to the artist. Skipping any step or releasing payment early is forbidden.

State & Event Tracking: Each stage of the bid/commission process should update contract state and emit an event. For example, on acceptance of a bid, record the chosen bid as accepted and emit a BidAccepted event identifying the bidder; on fulfillment, emit a CommissionFulfilled (or reuse CommissionSubmitted from the hub as appropriate) event; on confirmation, emit a CommissionConfirmed or payment release event. This transparency ensures both parties and observers can track progress. Always verify the right conditions (e.g., correct bid ID, correct commissioner) at each step to avoid mismatches.

Refunds & Cancellations: If a commission is rejected or not fulfilled, provide a safe way to return funds to the appropriate party. For instance, if an artist never accepts any bid or fails to deliver, the bidder should be able to reclaim their escrowed ETH (perhaps after a timeout or cancellation call). Similarly, if an artist delivers but the commissioner does not confirm within a reasonable time, there should be a mechanism (or admin process) to resolve the escrow – either returning funds or releasing to artist based on predefined conditions. This prevents funds from being permanently locked due to stalled communication.
ERC1155 Edition Minting

Artist-Controlled Editions: Only the original artist (profile owner) can mint additional editions of an artwork (ERC1155 copies). If an ArtPiece will have limited editions or prints, the artist’s profile must handle this through its linked ArtSales1155 contract. Each Profile can bind exactly one ArtSales1155 instance (set once via setArtSales1155), and all multi-edition sales for that profile funnel through it.

Authorized Minting Actions: The ArtSales1155 contract tied to a profile should accept state-changing actions (like adding a new ERC1155 token to sell) only from the profile’s owner account. For example, when an artist creates ERC1155 copies of an ArtPiece, they would call ArtSales1155.addAdditionalMintErc1155() from their own address, and the contract must reject calls from any other address. This prevents other users or contracts from minting unauthorized copies.
Link Originals to Editions: Maintain a clear mapping between an original ArtPiece (especially commission pieces) and its ERC1155 editions. Use the provided mapping (e.g., artistCommissionToErc1155Map) to tie each commission or artwork to the ERC1155 token contract representing its copies. This ensures that anyone examining the contracts can trace an edition token back to the original piece and verify the link. Always update or remove this mapping consistently when editions are created or if an edition series is ended.

Consistent Supply Management: The logic for minting and selling ERC1155 editions should enforce the intended supply limits. For instance, if an artist decides to mint 100 copies, the contract should not allow more than 100 to be sold. While this is mostly application logic, the rules should remind the developer to handle counters or supply caps in the ERC1155 contract as needed. All sales or transfers of these editions should respect the platform’s rules (e.g., if royalties or other conditions exist, though not detailed here).
Cross-Chain NFT Ownership Updates

Source of Truth on Ownership: The ownership of an NFT that underpins a commission hub must always reflect the actual owner on the main (parent) chain. Never assign or assume the owner in the ArtCommissionHub contract without a verified update from the cross-chain process. The only way to update an ArtCommissionHub’s owner is via the L1→L2 relay mechanism (L1QueryOwnership → L2OwnershipRelay → ArtCommissionHubOwners).
L1QueryOwnership & L2OwnershipRelay Integration: Ensure that the L1QueryOwnership contract (on the main chain) monitors the NFT’s ownership (via events or direct queries) and sends the updated owner info to L2. The L2OwnershipRelay contract should be authorized to receive these messages and call the ArtCommissionHubOwners’s function to register the new owner. The system must reject unauthorized or malformed updates – L2OwnershipRelay should check the sender and chain ID before trusting any data.
ArtCommissionHubOwners Updates & Hub Sync: The ArtCommissionHubOwners contract on L2 is responsible for creating or updating commission hubs in response to ownership changes. On receiving a new owner for an NFT, ArtCommissionHubOwners will create a hub if none exists, or look up the existing hub for that NFT. It must then call ArtCommissionHub.updateRegistration(chain_id, nft_contract, token_id, new_owner) to sync the hub’s internal owner state. The old owner’s link to the hub should be removed and the new owner linked instead
. This involves updating internal mappings and also adding/removing the hub in the Profile of the respective owners (if they have profiles).
No Shortcut on Hub Owner: Developers should not manually set the owner in ArtCommissionHub or bypass the ArtCommissionHubOwners. All changes must propagate through the official pipeline to maintain consistency. The hub’s owner field should only change via the updateRegistration call coming from ArtCommissionHubOwners, which guarantees the hub’s owner is always the legitimate NFT holder.
Generic Hub Ownership: For commission hubs that are not tied to an NFT (isGeneric hubs for individual wallets or DAOs), the ArtCommissionHubOwners’s createGenericCommissionHub should be used to initialize the hub with a given owner
. Even though these are not linked to an L1 asset, changing their ownership (if ever allowed) should follow a similar controlled approach (e.g., perhaps only the ArtCommissionHubOwners or the owner itself can transfer ownership, with an event). Consistency in how ownership changes propagate is key to avoid confusion.
Coding Style & Conventions
Function Naming: Use camelCase for all function names and state variable names, per Vyper 0.4.1 style and project guidelines. For example, define createProfile, createArtPiece, commissionHubCount etc., not snake_case for those. This convention is evident throughout the codebase (e.g., setArtSales1155 in Profile)
. Consistent camelCase naming makes the contracts easier to read and avoids style mix-ups.
Parameter Naming: Function parameters should use underscore_case with a leading underscore. This means all parameters are lower_case (with words separated by underscores if needed) and start with _. For instance, in createArtPiece(_token_uri_data, _title, _other_party, ...) the parameters are prefixed with _ and use underscores between words
. Do not use camelCase or uppercase in parameter names. This helps distinguish parameters from state variables and follows Vyper conventions.
Event and Constant Naming: (Consistent with general style) Event names should be PascalCase (e.g. CommissionSubmitted, ProfileCreated) and constants uppercase with underscores if applicable (not heavily used in this code except interface IDs). While writing the rules file, ensure not to deviate from the established naming pattern seen in the project.
Avoid Common Pitfalls: Adhere to these naming rules to prevent mistakes like referencing the wrong variable (e.g., using owner vs _owner). Also maintain consistency in similar constructs – for instance, if one contract uses owner and another uses ownerAddress, standardize them if possible to the same name across contracts for the same concept. Consistent naming and style across the codebase enforces clarity and reduces bugs.
Formatting and Clarity: Write contracts with readability in mind. Keep functions focused and use comments where non-obvious behavior occurs (as seen in the provided code). While not strictly a style rule, avoiding deeply nested logic and following the checks-effects-interactions pattern (or its equivalent) will make the smart contracts safer and easier to audit.